#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LineSiterSitingTool
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="nX08LDRD")]
	public partial class LineSitingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPredefinedWeight(PredefinedWeight instance);
    partial void UpdatePredefinedWeight(PredefinedWeight instance);
    partial void DeletePredefinedWeight(PredefinedWeight instance);
    partial void InsertR_Theme_Question(R_Theme_Question instance);
    partial void UpdateR_Theme_Question(R_Theme_Question instance);
    partial void DeleteR_Theme_Question(R_Theme_Question instance);
    partial void Insertraster(raster instance);
    partial void Updateraster(raster instance);
    partial void Deleteraster(raster instance);
    partial void InsertTheme(Theme instance);
    partial void UpdateTheme(Theme instance);
    partial void DeleteTheme(Theme instance);
    partial void InsertChoice(Choice instance);
    partial void UpdateChoice(Choice instance);
    partial void DeleteChoice(Choice instance);
    partial void InsertR_Question_Choice_Respondent(R_Question_Choice_Respondent instance);
    partial void UpdateR_Question_Choice_Respondent(R_Question_Choice_Respondent instance);
    partial void DeleteR_Question_Choice_Respondent(R_Question_Choice_Respondent instance);
    partial void Insertrespondent(respondent instance);
    partial void Updaterespondent(respondent instance);
    partial void Deleterespondent(respondent instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    #endregion
		
		public LineSitingDataContext() : 
				base(global::LineSiterSitingTool.Properties.Settings.Default.nX08LDRDConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LineSitingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LineSitingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LineSitingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LineSitingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PredefinedWeight> PredefinedWeights
		{
			get
			{
				return this.GetTable<PredefinedWeight>();
			}
		}
		
		public System.Data.Linq.Table<R_Theme_Question> R_Theme_Questions
		{
			get
			{
				return this.GetTable<R_Theme_Question>();
			}
		}
		
		public System.Data.Linq.Table<raster> rasters
		{
			get
			{
				return this.GetTable<raster>();
			}
		}
		
		public System.Data.Linq.Table<Theme> Themes
		{
			get
			{
				return this.GetTable<Theme>();
			}
		}
		
		public System.Data.Linq.Table<Choice> Choices
		{
			get
			{
				return this.GetTable<Choice>();
			}
		}
		
		public System.Data.Linq.Table<R_Question_Choice_Respondent> R_Question_Choice_Respondents
		{
			get
			{
				return this.GetTable<R_Question_Choice_Respondent>();
			}
		}
		
		public System.Data.Linq.Table<respondent> respondents
		{
			get
			{
				return this.GetTable<respondent>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PredefinedWeight")]
	public partial class PredefinedWeight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PWID;
		
		private int _ThemeID;
		
		private decimal _predefinedWeight1;
		
		private EntityRef<Theme> _Theme;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPWIDChanging(int value);
    partial void OnPWIDChanged();
    partial void OnThemeIDChanging(int value);
    partial void OnThemeIDChanged();
    partial void OnpredefinedWeight1Changing(decimal value);
    partial void OnpredefinedWeight1Changed();
    #endregion
		
		public PredefinedWeight()
		{
			this._Theme = default(EntityRef<Theme>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PWID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PWID
		{
			get
			{
				return this._PWID;
			}
			set
			{
				if ((this._PWID != value))
				{
					this.OnPWIDChanging(value);
					this.SendPropertyChanging();
					this._PWID = value;
					this.SendPropertyChanged("PWID");
					this.OnPWIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeID", DbType="Int NOT NULL")]
		public int ThemeID
		{
			get
			{
				return this._ThemeID;
			}
			set
			{
				if ((this._ThemeID != value))
				{
					if (this._Theme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThemeIDChanging(value);
					this.SendPropertyChanging();
					this._ThemeID = value;
					this.SendPropertyChanged("ThemeID");
					this.OnThemeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="predefinedWeight", Storage="_predefinedWeight1", DbType="Decimal(8,6) NOT NULL")]
		public decimal predefinedWeight1
		{
			get
			{
				return this._predefinedWeight1;
			}
			set
			{
				if ((this._predefinedWeight1 != value))
				{
					this.OnpredefinedWeight1Changing(value);
					this.SendPropertyChanging();
					this._predefinedWeight1 = value;
					this.SendPropertyChanged("predefinedWeight1");
					this.OnpredefinedWeight1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_PredefinedWeight", Storage="_Theme", ThisKey="ThemeID", OtherKey="themeID", IsForeignKey=true)]
		public Theme Theme
		{
			get
			{
				return this._Theme.Entity;
			}
			set
			{
				Theme previousValue = this._Theme.Entity;
				if (((previousValue != value) 
							|| (this._Theme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Theme.Entity = null;
						previousValue.PredefinedWeights.Remove(this);
					}
					this._Theme.Entity = value;
					if ((value != null))
					{
						value.PredefinedWeights.Add(this);
						this._ThemeID = value.themeID;
					}
					else
					{
						this._ThemeID = default(int);
					}
					this.SendPropertyChanged("Theme");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[R:Theme-Question]")]
	public partial class R_Theme_Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TQID;
		
		private int _themeID;
		
		private int _questionID;
		
		private EntityRef<Theme> _Theme;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTQIDChanging(int value);
    partial void OnTQIDChanged();
    partial void OnthemeIDChanging(int value);
    partial void OnthemeIDChanged();
    partial void OnquestionIDChanging(int value);
    partial void OnquestionIDChanged();
    #endregion
		
		public R_Theme_Question()
		{
			this._Theme = default(EntityRef<Theme>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TQID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TQID
		{
			get
			{
				return this._TQID;
			}
			set
			{
				if ((this._TQID != value))
				{
					this.OnTQIDChanging(value);
					this.SendPropertyChanging();
					this._TQID = value;
					this.SendPropertyChanged("TQID");
					this.OnTQIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_themeID", DbType="Int NOT NULL")]
		public int themeID
		{
			get
			{
				return this._themeID;
			}
			set
			{
				if ((this._themeID != value))
				{
					if (this._Theme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnthemeIDChanging(value);
					this.SendPropertyChanging();
					this._themeID = value;
					this.SendPropertyChanged("themeID");
					this.OnthemeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionID", DbType="Int NOT NULL")]
		public int questionID
		{
			get
			{
				return this._questionID;
			}
			set
			{
				if ((this._questionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionIDChanging(value);
					this.SendPropertyChanging();
					this._questionID = value;
					this.SendPropertyChanged("questionID");
					this.OnquestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_R_Theme_Question", Storage="_Theme", ThisKey="themeID", OtherKey="themeID", IsForeignKey=true)]
		public Theme Theme
		{
			get
			{
				return this._Theme.Entity;
			}
			set
			{
				Theme previousValue = this._Theme.Entity;
				if (((previousValue != value) 
							|| (this._Theme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Theme.Entity = null;
						previousValue.R_Theme_Questions.Remove(this);
					}
					this._Theme.Entity = value;
					if ((value != null))
					{
						value.R_Theme_Questions.Add(this);
						this._themeID = value.themeID;
					}
					else
					{
						this._themeID = default(int);
					}
					this.SendPropertyChanged("Theme");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_R_Theme_Question", Storage="_Question", ThisKey="questionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.R_Theme_Questions.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.R_Theme_Questions.Add(this);
						this._questionID = value.QuestionID;
					}
					else
					{
						this._questionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.raster")]
	public partial class raster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rasterID;
		
		private int _themeID;
		
		private string _fileLocation;
		
		private EntityRef<Theme> _Theme;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrasterIDChanging(int value);
    partial void OnrasterIDChanged();
    partial void OnthemeIDChanging(int value);
    partial void OnthemeIDChanged();
    partial void OnfileLocationChanging(string value);
    partial void OnfileLocationChanged();
    #endregion
		
		public raster()
		{
			this._Theme = default(EntityRef<Theme>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rasterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rasterID
		{
			get
			{
				return this._rasterID;
			}
			set
			{
				if ((this._rasterID != value))
				{
					this.OnrasterIDChanging(value);
					this.SendPropertyChanging();
					this._rasterID = value;
					this.SendPropertyChanged("rasterID");
					this.OnrasterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_themeID", DbType="Int NOT NULL")]
		public int themeID
		{
			get
			{
				return this._themeID;
			}
			set
			{
				if ((this._themeID != value))
				{
					if (this._Theme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnthemeIDChanging(value);
					this.SendPropertyChanging();
					this._themeID = value;
					this.SendPropertyChanged("themeID");
					this.OnthemeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileLocation", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string fileLocation
		{
			get
			{
				return this._fileLocation;
			}
			set
			{
				if ((this._fileLocation != value))
				{
					this.OnfileLocationChanging(value);
					this.SendPropertyChanging();
					this._fileLocation = value;
					this.SendPropertyChanged("fileLocation");
					this.OnfileLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_raster", Storage="_Theme", ThisKey="themeID", OtherKey="themeID", IsForeignKey=true)]
		public Theme Theme
		{
			get
			{
				return this._Theme.Entity;
			}
			set
			{
				Theme previousValue = this._Theme.Entity;
				if (((previousValue != value) 
							|| (this._Theme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Theme.Entity = null;
						previousValue.rasters.Remove(this);
					}
					this._Theme.Entity = value;
					if ((value != null))
					{
						value.rasters.Add(this);
						this._themeID = value.themeID;
					}
					else
					{
						this._themeID = default(int);
					}
					this.SendPropertyChanged("Theme");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Theme")]
	public partial class Theme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _themeID;
		
		private string _tDescription;
		
		private EntitySet<PredefinedWeight> _PredefinedWeights;
		
		private EntitySet<R_Theme_Question> _R_Theme_Questions;
		
		private EntitySet<raster> _rasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnthemeIDChanging(int value);
    partial void OnthemeIDChanged();
    partial void OntDescriptionChanging(string value);
    partial void OntDescriptionChanged();
    #endregion
		
		public Theme()
		{
			this._PredefinedWeights = new EntitySet<PredefinedWeight>(new Action<PredefinedWeight>(this.attach_PredefinedWeights), new Action<PredefinedWeight>(this.detach_PredefinedWeights));
			this._R_Theme_Questions = new EntitySet<R_Theme_Question>(new Action<R_Theme_Question>(this.attach_R_Theme_Questions), new Action<R_Theme_Question>(this.detach_R_Theme_Questions));
			this._rasters = new EntitySet<raster>(new Action<raster>(this.attach_rasters), new Action<raster>(this.detach_rasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_themeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int themeID
		{
			get
			{
				return this._themeID;
			}
			set
			{
				if ((this._themeID != value))
				{
					this.OnthemeIDChanging(value);
					this.SendPropertyChanging();
					this._themeID = value;
					this.SendPropertyChanged("themeID");
					this.OnthemeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string tDescription
		{
			get
			{
				return this._tDescription;
			}
			set
			{
				if ((this._tDescription != value))
				{
					this.OntDescriptionChanging(value);
					this.SendPropertyChanging();
					this._tDescription = value;
					this.SendPropertyChanged("tDescription");
					this.OntDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_PredefinedWeight", Storage="_PredefinedWeights", ThisKey="themeID", OtherKey="ThemeID")]
		public EntitySet<PredefinedWeight> PredefinedWeights
		{
			get
			{
				return this._PredefinedWeights;
			}
			set
			{
				this._PredefinedWeights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_R_Theme_Question", Storage="_R_Theme_Questions", ThisKey="themeID", OtherKey="themeID")]
		public EntitySet<R_Theme_Question> R_Theme_Questions
		{
			get
			{
				return this._R_Theme_Questions;
			}
			set
			{
				this._R_Theme_Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_raster", Storage="_rasters", ThisKey="themeID", OtherKey="themeID")]
		public EntitySet<raster> rasters
		{
			get
			{
				return this._rasters;
			}
			set
			{
				this._rasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PredefinedWeights(PredefinedWeight entity)
		{
			this.SendPropertyChanging();
			entity.Theme = this;
		}
		
		private void detach_PredefinedWeights(PredefinedWeight entity)
		{
			this.SendPropertyChanging();
			entity.Theme = null;
		}
		
		private void attach_R_Theme_Questions(R_Theme_Question entity)
		{
			this.SendPropertyChanging();
			entity.Theme = this;
		}
		
		private void detach_R_Theme_Questions(R_Theme_Question entity)
		{
			this.SendPropertyChanging();
			entity.Theme = null;
		}
		
		private void attach_rasters(raster entity)
		{
			this.SendPropertyChanging();
			entity.Theme = this;
		}
		
		private void detach_rasters(raster entity)
		{
			this.SendPropertyChanging();
			entity.Theme = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Choice")]
	public partial class Choice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChoiceID;
		
		private string _cText;
		
		private System.Nullable<decimal> _cWeight;
		
		private EntitySet<R_Question_Choice_Respondent> _R_Question_Choice_Respondents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChoiceIDChanging(int value);
    partial void OnChoiceIDChanged();
    partial void OncTextChanging(string value);
    partial void OncTextChanged();
    partial void OncWeightChanging(System.Nullable<decimal> value);
    partial void OncWeightChanged();
    #endregion
		
		public Choice()
		{
			this._R_Question_Choice_Respondents = new EntitySet<R_Question_Choice_Respondent>(new Action<R_Question_Choice_Respondent>(this.attach_R_Question_Choice_Respondents), new Action<R_Question_Choice_Respondent>(this.detach_R_Question_Choice_Respondents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChoiceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChoiceID
		{
			get
			{
				return this._ChoiceID;
			}
			set
			{
				if ((this._ChoiceID != value))
				{
					this.OnChoiceIDChanging(value);
					this.SendPropertyChanging();
					this._ChoiceID = value;
					this.SendPropertyChanged("ChoiceID");
					this.OnChoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string cText
		{
			get
			{
				return this._cText;
			}
			set
			{
				if ((this._cText != value))
				{
					this.OncTextChanging(value);
					this.SendPropertyChanging();
					this._cText = value;
					this.SendPropertyChanged("cText");
					this.OncTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cWeight", DbType="Decimal(18,6)")]
		public System.Nullable<decimal> cWeight
		{
			get
			{
				return this._cWeight;
			}
			set
			{
				if ((this._cWeight != value))
				{
					this.OncWeightChanging(value);
					this.SendPropertyChanging();
					this._cWeight = value;
					this.SendPropertyChanged("cWeight");
					this.OncWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Choice_R_Question_Choice_Respondent", Storage="_R_Question_Choice_Respondents", ThisKey="ChoiceID", OtherKey="ChoiceID")]
		public EntitySet<R_Question_Choice_Respondent> R_Question_Choice_Respondents
		{
			get
			{
				return this._R_Question_Choice_Respondents;
			}
			set
			{
				this._R_Question_Choice_Respondents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_R_Question_Choice_Respondents(R_Question_Choice_Respondent entity)
		{
			this.SendPropertyChanging();
			entity.Choice = this;
		}
		
		private void detach_R_Question_Choice_Respondents(R_Question_Choice_Respondent entity)
		{
			this.SendPropertyChanging();
			entity.Choice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[R:Question-Choice-Respondent]")]
	public partial class R_Question_Choice_Respondent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RCRID;
		
		private int _QuestionID;
		
		private int _ChoiceID;
		
		private int _RespondentID;
		
		private EntityRef<Choice> _Choice;
		
		private EntityRef<respondent> _respondent;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRCRIDChanging(int value);
    partial void OnRCRIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnChoiceIDChanging(int value);
    partial void OnChoiceIDChanged();
    partial void OnRespondentIDChanging(int value);
    partial void OnRespondentIDChanged();
    #endregion
		
		public R_Question_Choice_Respondent()
		{
			this._Choice = default(EntityRef<Choice>);
			this._respondent = default(EntityRef<respondent>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RCRID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RCRID
		{
			get
			{
				return this._RCRID;
			}
			set
			{
				if ((this._RCRID != value))
				{
					this.OnRCRIDChanging(value);
					this.SendPropertyChanging();
					this._RCRID = value;
					this.SendPropertyChanged("RCRID");
					this.OnRCRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChoiceID", DbType="Int NOT NULL")]
		public int ChoiceID
		{
			get
			{
				return this._ChoiceID;
			}
			set
			{
				if ((this._ChoiceID != value))
				{
					if (this._Choice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChoiceIDChanging(value);
					this.SendPropertyChanging();
					this._ChoiceID = value;
					this.SendPropertyChanged("ChoiceID");
					this.OnChoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RespondentID", DbType="Int NOT NULL")]
		public int RespondentID
		{
			get
			{
				return this._RespondentID;
			}
			set
			{
				if ((this._RespondentID != value))
				{
					if (this._respondent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRespondentIDChanging(value);
					this.SendPropertyChanging();
					this._RespondentID = value;
					this.SendPropertyChanged("RespondentID");
					this.OnRespondentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Choice_R_Question_Choice_Respondent", Storage="_Choice", ThisKey="ChoiceID", OtherKey="ChoiceID", IsForeignKey=true)]
		public Choice Choice
		{
			get
			{
				return this._Choice.Entity;
			}
			set
			{
				Choice previousValue = this._Choice.Entity;
				if (((previousValue != value) 
							|| (this._Choice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Choice.Entity = null;
						previousValue.R_Question_Choice_Respondents.Remove(this);
					}
					this._Choice.Entity = value;
					if ((value != null))
					{
						value.R_Question_Choice_Respondents.Add(this);
						this._ChoiceID = value.ChoiceID;
					}
					else
					{
						this._ChoiceID = default(int);
					}
					this.SendPropertyChanged("Choice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="respondent_R_Question_Choice_Respondent", Storage="_respondent", ThisKey="RespondentID", OtherKey="respondentID", IsForeignKey=true)]
		public respondent respondent
		{
			get
			{
				return this._respondent.Entity;
			}
			set
			{
				respondent previousValue = this._respondent.Entity;
				if (((previousValue != value) 
							|| (this._respondent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._respondent.Entity = null;
						previousValue.R_Question_Choice_Respondents.Remove(this);
					}
					this._respondent.Entity = value;
					if ((value != null))
					{
						value.R_Question_Choice_Respondents.Add(this);
						this._RespondentID = value.respondentID;
					}
					else
					{
						this._RespondentID = default(int);
					}
					this.SendPropertyChanged("respondent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_R_Question_Choice_Respondent", Storage="_Question", ThisKey="QuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.R_Question_Choice_Respondents.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.R_Question_Choice_Respondents.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.respondent")]
	public partial class respondent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _respondentID;
		
		private string _rZip;
		
		private string _rGender;
		
		private EntitySet<R_Question_Choice_Respondent> _R_Question_Choice_Respondents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrespondentIDChanging(int value);
    partial void OnrespondentIDChanged();
    partial void OnrZipChanging(string value);
    partial void OnrZipChanged();
    partial void OnrGenderChanging(string value);
    partial void OnrGenderChanged();
    #endregion
		
		public respondent()
		{
			this._R_Question_Choice_Respondents = new EntitySet<R_Question_Choice_Respondent>(new Action<R_Question_Choice_Respondent>(this.attach_R_Question_Choice_Respondents), new Action<R_Question_Choice_Respondent>(this.detach_R_Question_Choice_Respondents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_respondentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int respondentID
		{
			get
			{
				return this._respondentID;
			}
			set
			{
				if ((this._respondentID != value))
				{
					this.OnrespondentIDChanging(value);
					this.SendPropertyChanging();
					this._respondentID = value;
					this.SendPropertyChanged("respondentID");
					this.OnrespondentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rZip", DbType="NVarChar(10)")]
		public string rZip
		{
			get
			{
				return this._rZip;
			}
			set
			{
				if ((this._rZip != value))
				{
					this.OnrZipChanging(value);
					this.SendPropertyChanging();
					this._rZip = value;
					this.SendPropertyChanged("rZip");
					this.OnrZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rGender", DbType="NVarChar(10)")]
		public string rGender
		{
			get
			{
				return this._rGender;
			}
			set
			{
				if ((this._rGender != value))
				{
					this.OnrGenderChanging(value);
					this.SendPropertyChanging();
					this._rGender = value;
					this.SendPropertyChanged("rGender");
					this.OnrGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="respondent_R_Question_Choice_Respondent", Storage="_R_Question_Choice_Respondents", ThisKey="respondentID", OtherKey="RespondentID")]
		public EntitySet<R_Question_Choice_Respondent> R_Question_Choice_Respondents
		{
			get
			{
				return this._R_Question_Choice_Respondents;
			}
			set
			{
				this._R_Question_Choice_Respondents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_R_Question_Choice_Respondents(R_Question_Choice_Respondent entity)
		{
			this.SendPropertyChanging();
			entity.respondent = this;
		}
		
		private void detach_R_Question_Choice_Respondents(R_Question_Choice_Respondent entity)
		{
			this.SendPropertyChanging();
			entity.respondent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionID;
		
		private string _qText;
		
		private string _qName;
		
		private System.Nullable<decimal> _qWeight;
		
		private EntitySet<R_Theme_Question> _R_Theme_Questions;
		
		private EntitySet<R_Question_Choice_Respondent> _R_Question_Choice_Respondents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnqTextChanging(string value);
    partial void OnqTextChanged();
    partial void OnqNameChanging(string value);
    partial void OnqNameChanged();
    partial void OnqWeightChanging(System.Nullable<decimal> value);
    partial void OnqWeightChanged();
    #endregion
		
		public Question()
		{
			this._R_Theme_Questions = new EntitySet<R_Theme_Question>(new Action<R_Theme_Question>(this.attach_R_Theme_Questions), new Action<R_Theme_Question>(this.detach_R_Theme_Questions));
			this._R_Question_Choice_Respondents = new EntitySet<R_Question_Choice_Respondent>(new Action<R_Question_Choice_Respondent>(this.attach_R_Question_Choice_Respondents), new Action<R_Question_Choice_Respondent>(this.detach_R_Question_Choice_Respondents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string qText
		{
			get
			{
				return this._qText;
			}
			set
			{
				if ((this._qText != value))
				{
					this.OnqTextChanging(value);
					this.SendPropertyChanging();
					this._qText = value;
					this.SendPropertyChanged("qText");
					this.OnqTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string qName
		{
			get
			{
				return this._qName;
			}
			set
			{
				if ((this._qName != value))
				{
					this.OnqNameChanging(value);
					this.SendPropertyChanging();
					this._qName = value;
					this.SendPropertyChanged("qName");
					this.OnqNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qWeight", DbType="Decimal(18,6)")]
		public System.Nullable<decimal> qWeight
		{
			get
			{
				return this._qWeight;
			}
			set
			{
				if ((this._qWeight != value))
				{
					this.OnqWeightChanging(value);
					this.SendPropertyChanging();
					this._qWeight = value;
					this.SendPropertyChanged("qWeight");
					this.OnqWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_R_Theme_Question", Storage="_R_Theme_Questions", ThisKey="QuestionID", OtherKey="questionID")]
		public EntitySet<R_Theme_Question> R_Theme_Questions
		{
			get
			{
				return this._R_Theme_Questions;
			}
			set
			{
				this._R_Theme_Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_R_Question_Choice_Respondent", Storage="_R_Question_Choice_Respondents", ThisKey="QuestionID", OtherKey="QuestionID")]
		public EntitySet<R_Question_Choice_Respondent> R_Question_Choice_Respondents
		{
			get
			{
				return this._R_Question_Choice_Respondents;
			}
			set
			{
				this._R_Question_Choice_Respondents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_R_Theme_Questions(R_Theme_Question entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_R_Theme_Questions(R_Theme_Question entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_R_Question_Choice_Respondents(R_Question_Choice_Respondent entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_R_Question_Choice_Respondents(R_Question_Choice_Respondent entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
}
#pragma warning restore 1591
